/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Work Log API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  WorkLog,
  WorkLogAggregation
} from './model';


export const getWorkLogApiListResponseMock = (overrideResponse: Partial< WorkLogAggregation > = {}): WorkLogAggregation => ({total_h: faker.number.int({min: undefined, max: undefined}), comm_h: faker.number.int({min: undefined, max: undefined}), work_h: faker.number.int({min: undefined, max: undefined}), logs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.date.past().toISOString().split('T')[0], total_h: faker.number.int({min: undefined, max: undefined}), comm_h: faker.number.int({min: undefined, max: undefined}), work_h: faker.number.int({min: undefined, max: undefined}), memo: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), ...overrideResponse})

export const getWorkLogApiCreateResponseMock = (overrideResponse: Partial< WorkLog > = {}): WorkLog => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.date.past().toISOString().split('T')[0], total_h: faker.number.int({min: undefined, max: undefined}), comm_h: faker.number.int({min: undefined, max: undefined}), work_h: faker.number.int({min: undefined, max: undefined}), memo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getWorkLogApiReadResponseMock = (overrideResponse: Partial< WorkLog > = {}): WorkLog => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.date.past().toISOString().split('T')[0], total_h: faker.number.int({min: undefined, max: undefined}), comm_h: faker.number.int({min: undefined, max: undefined}), work_h: faker.number.int({min: undefined, max: undefined}), memo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getWorkLogApiUpdateResponseMock = (overrideResponse: Partial< WorkLog > = {}): WorkLog => ({id: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), date: faker.date.past().toISOString().split('T')[0], total_h: faker.number.int({min: undefined, max: undefined}), comm_h: faker.number.int({min: undefined, max: undefined}), work_h: faker.number.int({min: undefined, max: undefined}), memo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getWorkLogApiListMockHandler = (overrideResponse?: WorkLogAggregation | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<WorkLogAggregation> | WorkLogAggregation)) => {
  return http.get('*/worklogs', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getWorkLogApiListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getWorkLogApiCreateMockHandler = (overrideResponse?: WorkLog | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<WorkLog> | WorkLog)) => {
  return http.post('*/worklogs', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getWorkLogApiCreateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getWorkLogApiReadMockHandler = (overrideResponse?: WorkLog | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<WorkLog> | WorkLog)) => {
  return http.get('*/worklogs/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getWorkLogApiReadResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getWorkLogApiUpdateMockHandler = (overrideResponse?: WorkLog | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<WorkLog> | WorkLog)) => {
  return http.patch('*/worklogs/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getWorkLogApiUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getWorkLogApiDeleteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/worklogs/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getWorkLogAPIMock = () => [
  getWorkLogApiListMockHandler(),
  getWorkLogApiCreateMockHandler(),
  getWorkLogApiReadMockHandler(),
  getWorkLogApiUpdateMockHandler(),
  getWorkLogApiDeleteMockHandler()]
