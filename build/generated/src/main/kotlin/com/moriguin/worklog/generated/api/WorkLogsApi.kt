/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.moriguin.worklog.generated.api

import com.moriguin.worklog.generated.model.ApiError
import com.moriguin.worklog.generated.model.RequestWorkLog
import com.moriguin.worklog.generated.model.WorkLog
import com.moriguin.worklog.generated.model.WorkLogAggregation
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface WorkLogsApi {

    @Operation(
        tags = ["WorkLogs",],
        summary = "",
        operationId = "workLogApiCreate",
        description = """WorkLog を作成""",
        responses = [
            ApiResponse(responseCode = "200", description = "The request has succeeded.", content = [Content(schema = Schema(implementation = WorkLog::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected error response.", content = [Content(schema = Schema(implementation = ApiError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/worklogs"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun workLogApiCreate(@Parameter(description = "", required = true) @Valid @RequestBody requestWorkLog: RequestWorkLog): ResponseEntity<WorkLog> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["WorkLogs",],
        summary = "",
        operationId = "workLogApiDelete",
        description = """WorkLog を削除""",
        responses = [
            ApiResponse(responseCode = "204", description = "There is no content to send for this request, but the headers may be useful. "),
            ApiResponse(responseCode = "200", description = "An unexpected error response.", content = [Content(schema = Schema(implementation = ApiError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/worklogs/{id}"],
            produces = ["application/json"]
    )
    fun workLogApiDelete(@Parameter(description = "", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["WorkLogs",],
        summary = "",
        operationId = "workLogApiList",
        description = """WorkLog の一覧を取得""",
        responses = [
            ApiResponse(responseCode = "200", description = "The request has succeeded.", content = [Content(schema = Schema(implementation = WorkLogAggregation::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected error response.", content = [Content(schema = Schema(implementation = ApiError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/worklogs"],
            produces = ["application/json"]
    )
    fun workLogApiList( @RequestParam(value = "month", required = true) month: kotlin.String): ResponseEntity<WorkLogAggregation> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["WorkLogs",],
        summary = "",
        operationId = "workLogApiRead",
        description = """WorkLog を取得""",
        responses = [
            ApiResponse(responseCode = "200", description = "The request has succeeded.", content = [Content(schema = Schema(implementation = WorkLog::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected error response.", content = [Content(schema = Schema(implementation = ApiError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/worklogs/{id}"],
            produces = ["application/json"]
    )
    fun workLogApiRead(@Parameter(description = "", required = true) @PathVariable("id") id: kotlin.Int): ResponseEntity<WorkLog> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["WorkLogs",],
        summary = "",
        operationId = "workLogApiUpdate",
        description = """WorkLog を更新""",
        responses = [
            ApiResponse(responseCode = "200", description = "The request has succeeded.", content = [Content(schema = Schema(implementation = WorkLog::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected error response.", content = [Content(schema = Schema(implementation = ApiError::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PATCH],
            value = ["/worklogs/{id}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun workLogApiUpdate(@Parameter(description = "", required = true) @PathVariable("id") id: kotlin.Int,@Parameter(description = "", required = true) @Valid @RequestBody requestWorkLog: RequestWorkLog): ResponseEntity<WorkLog> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
